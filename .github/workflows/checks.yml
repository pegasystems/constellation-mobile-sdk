name: "Perform build and checks"
on:
  push
jobs:
  validate-android:
    runs-on: 'ubuntu-latest'
    env:
      GRADLE: ./gradlew -Dorg.gradle.console=plain --info --stacktrace --no-daemon
      EMULATOR_IMAGE: 'system-images;android-35;google_apis;x86_64'
      XCB_PARAMS: '--preserve-unbeautified --is-ci --renderer github-actions'

    steps:
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up cache for Gradle
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: gradle-cache

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719
          packages: '${{ env.EMULATOR_IMAGE }} platforms;android-35 platform-tools emulator'
          log-accepted-android-sdk-licenses: false

      - name: Assemble SDK
        run: cd android && $GRADLE clean assemble

      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          arch: x86_64
          profile: Nexus 6
          # Run tests for second time if first time we have failed
          script: cd android && ( $GRADLE connectedCheck || $GRADLE connectedCheck )

      - name: Upload test artifacts for failures
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: validate-android-artifacts
          path: android/app/build/reports/androidTests/connected/debug
          if-no-files-found: warn
          retention-days: 3

  validate-ios:
    runs-on: 'macos-15'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install esbuild
        run: brew install esbuild xcbeautify

      - name: Create new test simulator
        run: |
          xcodebuild -version
          echo "Listing available devices / iOSes:"
          xcrun simctl list
          echo "Deleting simulator SDKTestSimulator (if exists)"
          xcrun simctl delete SDKTestSimulator || true
          echo "Creating new SDKTestSimulator"
          xcrun simctl create SDKTestSimulator com.apple.CoreSimulator.SimDeviceType.iPhone-16 com.apple.CoreSimulator.SimRuntime.iOS-18-2 | tee simulator.id

      - name: iOS sample application UI tests
        run: |
          cd ios
          echo $PWD
          rm -rf build || true
          mkdir build
          xcodebuild -workspace SDK.xcworkspace -scheme SampleMockedApp -destination "platform=iOS Simulator,id=$(cat ../simulator.id)" -resultBundlePath ./build/iOSTests.xcresult clean test | xcbeautify $XCB_PARAMS

      - name: Upload test artifacts for failures
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: validate-ios-artifacts
          path: ios/build
          if-no-files-found: warn
          retention-days: 3

      - name: iOS sample application build
        run: |
          cd ios
          echo $PWD
          xcodebuild -workspace SDK.xcworkspace -scheme SampleNativeSwiftApp clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcbeautify $XCB_PARAMS

      - name: Delete test simulator
        if: always()
        run: |
          echo "Deleting simulator SDKTestSimulator (if exists)"
          xcrun simctl delete SDKTestSimulator || true

